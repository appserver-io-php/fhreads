diff --git a/Zend/zend_objects_API.c b/Zend/zend_objects_API.c
index 00d9425..35e092c 100644
--- a/Zend/zend_objects_API.c
+++ b/Zend/zend_objects_API.c
@@ -26,6 +26,33 @@
 #include "zend_API.h"
 #include "zend_objects_API.h"
 
+ZEND_API uint32_t (*zend_objects_store_get_handle_ex)();
+ZEND_API void (*zend_objects_store_add_to_free_list_ex)(uint32_t handle);
+
+ZEND_API uint32_t zend_objects_store_get_handle()
+{
+	uint32_t handle;
+
+	if (EG(objects_store).free_list_head != -1) {
+		handle = EG(objects_store).free_list_head;
+		EG(objects_store).free_list_head = GET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[handle]);
+	} else {
+		if (EG(objects_store).top == EG(objects_store).size) {
+			EG(objects_store).size <<= 1;
+			EG(objects_store).object_buckets = (zend_object **) erealloc(EG(objects_store).object_buckets, EG(objects_store).size * sizeof(zend_object*));
+		}
+		handle = EG(objects_store).top++;
+	}
+
+	return handle;
+}
+
+ZEND_API void zend_objects_store_add_to_free_list(uint32_t handle)
+{
+	SET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[handle], EG(objects_store).free_list_head);	\
+	EG(objects_store).free_list_head = handle;
+}
+
 ZEND_API void zend_objects_store_init(zend_objects_store *objects, uint32_t init_size)
 {
 	objects->object_buckets = (zend_object **) emalloc(init_size * sizeof(zend_object*));
@@ -33,6 +60,10 @@ ZEND_API void zend_objects_store_init(zend_objects_store *objects, uint32_t init
 	objects->size = init_size;
 	objects->free_list_head = -1;
 	memset(&objects->object_buckets[0], 0, sizeof(zend_object*));
+
+	// set default zend functions
+	zend_objects_store_get_handle_ex = zend_objects_store_get_handle;
+	zend_objects_store_add_to_free_list_ex = zend_objects_store_add_to_free_list;
 }
 
 ZEND_API void zend_objects_store_destroy(zend_objects_store *objects)
@@ -109,18 +140,7 @@ ZEND_API void zend_objects_store_free_object_storage(zend_objects_store *objects
 
 ZEND_API void zend_objects_store_put(zend_object *object)
 {
-	int handle;
-
-	if (EG(objects_store).free_list_head != -1) {
-		handle = EG(objects_store).free_list_head;
-		EG(objects_store).free_list_head = GET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[handle]);
-	} else {
-		if (EG(objects_store).top == EG(objects_store).size) {
-			EG(objects_store).size <<= 1;
-			EG(objects_store).object_buckets = (zend_object **) erealloc(EG(objects_store).object_buckets, EG(objects_store).size * sizeof(zend_object*));
-		}
-		handle = EG(objects_store).top++;
-	}
+	int handle = zend_objects_store_get_handle_ex();
 	object->handle = handle;
 	EG(objects_store).object_buckets[handle] = object;
 }
@@ -136,7 +156,7 @@ ZEND_API void zend_objects_store_free(zend_object *object) /* {{{ */
 
 	GC_REMOVE_FROM_BUFFER(object);
 	efree(ptr);
-	ZEND_OBJECTS_STORE_ADD_TO_FREE_LIST(handle);
+	zend_objects_store_add_to_free_list_ex(handle);
 }
 /* }}} */
 
@@ -185,7 +205,7 @@ ZEND_API void zend_objects_store_del(zend_object *object) /* {{{ */
 				ptr = ((char*)object) - object->handlers->offset;
 				GC_REMOVE_FROM_BUFFER(object);
 				efree(ptr);
-				ZEND_OBJECTS_STORE_ADD_TO_FREE_LIST(handle);
+				zend_objects_store_add_to_free_list_ex(handle);
 			}
 
 			if (failure) {
diff --git a/Zend/zend_objects_API.h b/Zend/zend_objects_API.h
index dbdb02f..f32eb32 100644
--- a/Zend/zend_objects_API.h
+++ b/Zend/zend_objects_API.h
@@ -49,6 +49,9 @@ typedef struct _zend_objects_store {
 
 /* Global store handling functions */
 BEGIN_EXTERN_C()
+ZEND_API extern uint32_t (*zend_objects_store_get_handle_ex)();
+ZEND_API extern void (*zend_objects_store_add_to_free_list_ex)(uint32_t handle);
+
 ZEND_API void zend_objects_store_init(zend_objects_store *objects, uint32_t init_size);
 ZEND_API void zend_objects_store_call_destructors(zend_objects_store *objects);
 ZEND_API void zend_objects_store_mark_destructed(zend_objects_store *objects);
